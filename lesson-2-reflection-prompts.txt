What happens when you initialize a repository? Why do you need to do it?

	When I initialize a repository I create a .git file	which keeps
	track of the files inside their directory and their history.

How is the staging area different from the working directory and the repository?
What value do you think it offers?
	
	The staging area is the area in which I can keep all the files that I want
	to commit together. It's like an "under-construction" zone. Working
	directory is the directory I am currently operating and repository is
	a directory which keeps track of the all the files in it. With this staging
	area I can choose even if I alter all the files which ones to include in
	the next commit.
	
How can you use the staging area to make sure you have one commit per logical
change?

	By using git diff I can see any differences between the files that are on
	my working directory and my staging area. By using git diff --staged I
    can see the differences between the staging area and the repository. This
	way I have control over what changes I want to commit by choosing the files
	that I want to add.
	
What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	By branching I can create different versions of my project or even
	experiment a little without having to make any changes to the master
	project which likely has the more stable and best working version.

How do the diagrams help you visualize the branch structure?

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
